package despacho;
import com.fazecast.jSerialComm.SerialPort;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import java.util.Locale;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import javax.swing.*;
import com.fazecast.jSerialComm.*;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.sql.SQLException;
import java.util.Date;
import java.text.SimpleDateFormat; 
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class NewJFrame extends javax.swing.JFrame {

    //variables
    SerialPort serialPort1;
    OutputStream outputStream1;
    String dataBuffer = "";
    String heartBite = "101000           @    ";
    String jdbcUrl = "jdbc:mysql://localhost:3306/newrec";
    String jdbcUser = "AlbertoMN";
    String jdbcPassword = "C4municipal*";

    public NewJFrame() {
        initComponents();
        initializeDefaults();
    }

    //valores de la interfaz
        private void initializeDefaults() {
        jComboBox_baudRate.setSelectedItem("9600");
        jComboBox_dataBits.setSelectedItem("8");
        jComboBox_stopBits.setSelectedItem("1");
        jComboBox_parityBits.setSelectedItem("NO_PARITY");
        jComboBox_endLine.setSelectedItem("None");

        jComboBox_comPort.setEnabled(true);
        jProgressBar_comStatus.setValue(0);
        jButton_open.setEnabled(true);
        jButton_close.setEnabled(false);
        jButton_send.setEnabled(false);
    }
private void jComboBox_comPortPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {                                                             
        // obtenemos las conexiones probenientes de los puertos COM
        jComboBox_comPort.removeAllItems();
        SerialPort []portLists = SerialPort.getCommPorts();
        for(SerialPort port : portLists){
            jComboBox_comPort.addItem(port.getSystemPortName());
        }
    }                                                            

    private void jComboBox_comPortActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void jButton_openActionPerformed(java.awt.event.ActionEvent evt) {                                             

        //Conectamos con el puerto COM seleccionado presionando OPEN y si hay algun error arroja un mensaje de "ERROR"
        try {
            SerialPort[] portLists = SerialPort.getCommPorts();
            serialPort1 = portLists[jComboBox_comPort.getSelectedIndex()];
            configureSerialPort(serialPort1);

            if (serialPort1.isOpen()) {
                updateUIOnPortOpen(true);
                Serial_EventBasedReading(serialPort1);
            } else {
                JOptionPane.showMessageDialog(this, serialPort1.getDescriptivePortName() + " -- No se pudo conectar");
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Seleccione un puerto COM", "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }                                            

     private void configureSerialPort(SerialPort port) {
         //configuración del puerto serial para la conexión con la receptora
        port.setBaudRate(Integer.parseInt(jComboBox_baudRate.getSelectedItem().toString()));
        port.setNumDataBits(Integer.parseInt(jComboBox_dataBits.getSelectedItem().toString()));
        port.setNumStopBits(Integer.parseInt(jComboBox_stopBits.getSelectedItem().toString()));
        port.setParity(jComboBox_parityBits.getSelectedIndex());
        port.openPort();
    }
    private void updateUIOnPortOpen(boolean isOpen) {
        
        //si se conecto con el puerto arroja un mensaje de conoexión "EXITO"
        if (isOpen) {
            JOptionPane.showMessageDialog(this, serialPort1.getDescriptivePortName() + " -- Se conecto con exito");
            jComboBox_comPort.setEnabled(false);
            jProgressBar_comStatus.setValue(100);
            jButton_open.setEnabled(false);
            jButton_close.setEnabled(true);
            jButton_send.setEnabled(true);
        }
    }
    private void jButton_closeActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
        //Boton para cerar la conexión con la receptora
        if (serialPort1 != null && serialPort1.isOpen()) {
            serialPort1.closePort();
            resetUIOnPortClose();
        }
    }                                             

        private void resetUIOnPortClose() {
            //funcion para el boton de CLOSE, desconectar de la receptora
        jComboBox_comPort.setEnabled(true);
        jProgressBar_comStatus.setValue(0);
        jButton_open.setEnabled(true);
        jButton_close.setEnabled(false);
        jButton_send.setEnabled(false);
        try {
            if (outputStream1 != null) {
                outputStream1.close();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }
    private void jButton_cleanScreenActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // limpiar la pantalla 
        dataBuffer = "";
        jTextArea_incomingData.setText(dataBuffer);
    }                                                   

    private void jTextField_dataToSendActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void jButton_sendActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //Mandar Mensajes manualmente a la conexión COM a la cual esta conectado
        
        if (serialPort1.isOpen()) {
            try {
                outputStream1 = serialPort1.getOutputStream();
                String dataToSend = formatDataToSend();
                outputStream1.write(dataToSend.getBytes());
            } catch (IOException e) {
                JOptionPane.showConfirmDialog(this, e.getMessage());
            }
        }
    }                                            

    private String formatDataToSend() {
        //Formas para mandar datos
        String dataToSend = jTextField_dataToSend.getText();
        switch (jComboBox_endLine.getSelectedIndex()) {
            case 1: return dataToSend + "\n"; // new line
            case 2: return dataToSend + "\r"; // return
            case 3: return dataToSend + "\r\n"; // both
            default: return dataToSend; // nothing
        }
    }
    private void jComboBox_baudRateActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void jComboBox_dataBitsActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void jComboBox_stopBitsActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void jComboBox_parityBitsActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }                                                    

    private void jComboBox_endLineActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void Serial_EventBasedReading(SerialPort activePort) {
        //datos recibidos en el puerto serial
        activePort.addDataListener(new SerialPortDataListener() {
          @Override
          
          public int getListeningEvents() {
            return SerialPort.LISTENING_EVENT_DATA_RECEIVED;
          }

          //convertimos los datos a byte y guardamos en un string
          @Override
          public void serialEvent(SerialPortEvent event) {
            byte[] newData = event.getReceivedData();
            String data = new String(newData);

            // Actualizar el JTextArea
            jTextArea_incomingData.setText(data);

            // Detectar formato y guardar en archivo
            detectFormatAndSave(data);

            // Limpiar buffer de entrada
            dataBuffer = "";
          }
        });
    }
    
    private void detectFormatAndSave(String data) {
    // Get current date and time
    LocalDateTime now = LocalDateTime.now();
    String timestamp = now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

    try (FileWriter writer = new FileWriter("received_data.txt", true)) {
        // Detect format and save data with timestamp
        if (data.length() == 23 && data.startsWith("1") && data.charAt(17) == '@') {
            sendHeartBite();
            writer.write(timestamp + " - " + data + System.lineSeparator());
        } else if (data.length() == 23 && data.startsWith("5") && data.charAt(6) == ' ') {
            System.out.println("El formato es CONTACT ID");
            writer.write(timestamp + " - " + data + System.lineSeparator());
            extractDescription(data);
        } else if (data.length() == 23 && data.startsWith("1") && data.charAt(6) == ' ') {
            System.out.println("Es el formato 4/2");
            writer.write(timestamp + " - " + data + System.lineSeparator());
            //proceso para el formato 4/2
        } else {
            System.out.println("Es un formato no reconocido");
            //proceso para un formato no reconocdo.
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
//ejemplos
//heartbite: 123456 8901234567@90123
// contact id: 523456 R151234567890123
// 4/2: 123456 8901234567890123

    private void sendHeartBite() {
        //heartbite sirve para responder al llamado que hace la receptora al sistema
        try (OutputStream outputStream = serialPort1.getOutputStream()) {
            outputStream.write(heartBite.getBytes());
            System.out.println("Mensaje enviado: " + heartBite);
        } catch (IOException e) {
            JOptionPane.showConfirmDialog(this, e.getMessage());
        }
    }

   public String extractDescription(String code) {
    String description = null;

    try {
        // Extract code from fields 8, 9, and 10
        if (code.length() < 11) {
            throw new IllegalArgumentException("Invalid code format. Code must be at least 11 characters long.");
        }
        String extractedCode = code.substring(8, 11);

        // Realize connection to database
        try (Connection conn = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)) {
            // Prepare statement for finding code in database
            String sql = "SELECT des FROM codes WHERE cod = ?";
            PreparedStatement compareStmt = conn.prepareStatement(sql);
            compareStmt.setString(1, extractedCode);

            try (ResultSet rs = compareStmt.executeQuery()) {
                if (rs.next()) {
                    description = rs.getString("des");
                    // Save description to received_data table
                    saveToReceivedDataTable(conn, description);
                } else {
                    System.out.println("El codigo no fue encontrado, datos no guardados.");
                }
            } catch (SQLException e) {
                System.err.println("Error: Error checking code in 'codes' table." + e.getMessage());
            } finally {
                compareStmt.close(); // Close compareStmt even if an exception occurs
            }
        } catch (SQLException e) {
            System.err.println("Error: Fallo la conexión con la base de datos." + e.getMessage());
        }
    } catch (IllegalArgumentException e) {
        System.err.println("Error: Invalid code format." + e.getMessage());
    }

    return description;
}

// Function to save data to received_data table remains the same



//hacer el insert en la base de datos, el codigo que se encontro
private void saveToReceivedDataTable(Connection conn, String data) throws SQLException {
    String insertSQL = "INSERT INTO received_data (data, date) VALUES (?, ?)";
    try (PreparedStatement insertStmt = conn.prepareStatement(insertSQL)) {
        insertStmt.setString(1, data);
        insertStmt.setString(2, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
        int rowsAffected = insertStmt.executeUpdate();
        if (rowsAffected == 1) {
            System.out.println("Datos guardados en received_data.");
        } else {
            System.err.println("Error saving data to received_data table.");
        }
    }
}

 
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }